<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Access Control and Account Management on</title><link>https://openksc.github.io/docs/v3.3/access-control-and-account-management/</link><description>Recent content in Access Control and Account Management on</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://openksc.github.io/docs/v3.3/access-control-and-account-management/index.xml" rel="self" type="application/rss+xml"/><item><title>Kubernetes Multi-tenancy in KubeSphere</title><link>https://openksc.github.io/docs/v3.3/access-control-and-account-management/multi-tenancy-in-kubesphere/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.3/access-control-and-account-management/multi-tenancy-in-kubesphere/</guid><description>&lt;p>Kubernetes helps you orchestrate applications and schedule containers, greatly improving resource utilization. However, there are various challenges facing both enterprises and individuals in resource sharing and security as they use Kubernetes, which is different from how they managed and maintained clusters in the past.&lt;/p>
&lt;p>The first and foremost challenge is how to define multi-tenancy in an enterprise and the security boundary of tenants. &lt;a href="https://docs.google.com/document/d/1fj3yzmeU2eU8ZNBCUJG97dk_wC7228-e_MmdcmTNrZY" target="_blank" rel="noopener noreferrer">The discussion about multi-tenancy&lt;/a> has never stopped in the Kubernetes community, while there is no definite answer to how a multi-tenant system should be structured.&lt;/p></description></item></channel></rss>
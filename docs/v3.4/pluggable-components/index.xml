<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Enable Pluggable Components on</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/</link><description>Recent content in Enable Pluggable Components on</description><generator>Hugo</generator><language>en-US</language><atom:link href="https://openksc.github.io/docs/v3.4/pluggable-components/index.xml" rel="self" type="application/rss+xml"/><item><title>Enable Pluggable Components â€” Overview</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/overview/</guid><description>&lt;p>KubeSphere has decoupled some core feature components since v2.1.0. These components are designed to be pluggable which means you can enable them either before or after installation. By default, KubeSphere will be deployed with a minimal installation if you do not enable them.&lt;/p>
&lt;p>Different pluggable components are deployed in different namespaces. You can enable any of them based on your needs. It is highly recommended that you install these pluggable components to discover the full-stack features and capabilities provided by KubeSphere.&lt;/p></description></item><item><title>KubeSphere App Store</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/app-store/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/app-store/</guid><description>&lt;p>As an open-source and app-centric container platform, KubeSphere provides users with a Helm-based App Store for application lifecycle management on the back of &lt;a href="https://github.com/openpitrix/openpitrix" target="_blank" rel="noopener noreferrer">OpenPitrix&lt;/a>, an open-source web-based system to package, deploy and manage different types of apps. The KubeSphere App Store allows ISVs, developers, and users to upload, test, install, and release apps with just several clicks in a one-stop shop.&lt;/p>
&lt;p>Internally, the KubeSphere App Store can serve as a place for different teams to share data, middleware, and office applications. Externally, it is conducive to setting industry standards of building and delivery. After you enable this feature, you can add more apps with app templates.&lt;/p></description></item><item><title>KubeSphere DevOps System</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/devops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/devops/</guid><description>&lt;p>The KubeSphere DevOps System is designed for CI/CD workflows in Kubernetes. Based on &lt;a href="https://jenkins.io/" target="_blank" rel="noopener noreferrer">Jenkins&lt;/a>, it provides one-stop solutions to help both development and Ops teams build, test and publish apps to Kubernetes in a straight-forward way. It also features plugin management, &lt;a href="../../project-user-guide/image-builder/binary-to-image/">Binary-to-Image (B2I)&lt;/a>, &lt;a href="../../project-user-guide/image-builder/source-to-image/">Source-to-Image (S2I)&lt;/a>, code dependency caching, code quality analysis, pipeline logging, and more.&lt;/p>
&lt;p>The DevOps System offers an automated environment for users as apps can be automatically released to the same platform. It is also compatible with third-party private image registries (for example, Harbor) and code repositories (for example, GitLab/GitHub/SVN/BitBucket). As such, it creates excellent user experience by providing users with comprehensive, visualized CI/CD pipelines which are extremely useful in air-gapped environments.&lt;/p></description></item><item><title>KubeSphere Logging System</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/logging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/logging/</guid><description>&lt;p>KubeSphere provides a powerful, holistic, and easy-to-use logging system for log collection, query, and management. It covers logs at varied levels, including tenants, infrastructure resources, and applications. Users can search logs from different dimensions, such as project, workload, Pod and keyword. Compared with Kibana, the tenant-based logging system of KubeSphere features better isolation and security among tenants as tenants can only view their own logs. Apart from KubeSphere's own logging system, the container platform also allows users to add third-party log collectors, such as Elasticsearch, Kafka, and Fluentd.&lt;/p></description></item><item><title>KubeSphere Events</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/events/</guid><description>&lt;p>KubeSphere events allow users to keep track of what is happening inside a cluster, such as node scheduling status and image pulling result. They will be accurately recorded with the specific reason, status and message displayed in the web console. To query events, users can quickly launch the web Toolkit and enter related information in the search bar with different filters (e.g keyword and project) available. Events can also be archived to third-party tools, such as Elasticsearch, Kafka, or Fluentd.&lt;/p></description></item><item><title>KubeSphere Alerting</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/alerting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/alerting/</guid><description>&lt;p>Alerting is an important building block of observability, closely related to monitoring and logging. The alerting system in KubeSphere, coupled with the proactive failure notification system, allows users to know activities of interest based on alerting policies. When a predefined threshold of a certain metric is reached, an alert will be sent to preconfigured recipients. Therefore, you need to configure the notification method beforehand, including Email, Slack, DingTalk, WeCom, and Webhook. With a highly functional alerting and notification system in place, you can quickly identify and resolve potential issues in advance before they affect your business.&lt;/p></description></item><item><title>KubeSphere Audit Logs</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/auditing-logs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/auditing-logs/</guid><description>&lt;p>The KubeSphere Auditing Log System provides a security-relevant chronological set of records documenting the sequence of activities related to individual users, managers, or other components of the system. Each request to KubeSphere generates an event that is then written to a webhook and processed according to a certain rule.&lt;/p>
&lt;p>For more information, see &lt;a href="../../toolbox/auditing/auditing-query/">Auditing Log Query&lt;/a>.&lt;/p>
&lt;h2 id="enable-auditing-logs-before-installation">Enable Auditing Logs Before Installation&lt;/h2>
&lt;h3 id="installing-on-linux">Installing on Linux&lt;/h3>
&lt;p>When you implement multi-node installation KubeSphere on Linux, you need to create a configuration file, which lists all KubeSphere components.&lt;/p></description></item><item><title>KubeSphere Service Mesh</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/service-mesh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/service-mesh/</guid><description>&lt;p>On the basis of &lt;a href="https://istio.io/" target="_blank" rel="noopener noreferrer">Istio&lt;/a>, KubeSphere Service Mesh visualizes microservices governance and traffic management. It features a powerful toolkit including &lt;strong>circuit breaking, blue-green deployment, canary release, traffic mirroring, tracing, observability, and traffic control&lt;/strong>. Developers can easily get started with KubeSphere Service Mesh without any code hacking, which greatly reduces the learning curve of Istio. All features of KubeSphere Service Mesh are designed to meet users' demand for their business.&lt;/p>
&lt;p>For more information, see &lt;a href="../../project-user-guide/grayscale-release/overview/">Grayscale Release&lt;/a>.&lt;/p></description></item><item><title>Network Policies</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/network-policy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/network-policy/</guid><description>&lt;p>Starting from v3.0.0, users can configure network policies of native Kubernetes in KubeSphere. Network Policies are an application-centric construct, enabling you to specify how a Pod is allowed to communicate with various network entities over the network. With network policies, users can achieve network isolation within the same cluster, which means firewalls can be set up between certain instances (Pods).&lt;/p>
&lt;div class="notices note">
 
 &lt;p>Note&lt;/p>
 &lt;div>&lt;ul>
&lt;li>Please make sure that the CNI network plugin used by the cluster supports Network Policies before you enable the feature. There are a number of CNI network plugins that support Network Policies, including Calico, Cilium, Kube-router, Romana, and Weave Net.&lt;/li>
&lt;li>It is recommended that you use &lt;a href="https://www.projectcalico.org/" target="_blank" rel="noopener noreferrer">Calico&lt;/a> as the CNI plugin before you enable Network Policies.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;p>For more information, see &lt;a href="https://kubernetes.io/docs/concepts/services-networking/network-policies/" target="_blank" rel="noopener noreferrer">Network Policies&lt;/a>.&lt;/p></description></item><item><title>Metrics Server</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/metrics-server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/metrics-server/</guid><description>&lt;p>KubeSphere supports Horizontal Pod Autoscalers (HPA) for &lt;a href="../../project-user-guide/application-workloads/deployments/">Deployments&lt;/a>. In KubeSphere, the Metrics Server controls whether the HPA is enabled. You use an HPA object to autoscale a Deployment based on different types of metrics, such as CPU and memory utilization, as well as the minimum and maximum number of replicas. In this way, an HPA helps to make sure your application runs smoothly and consistently in different situations.&lt;/p>
&lt;h2 id="enable-the-metrics-server-before-installation">Enable the Metrics Server Before Installation&lt;/h2>
&lt;h3 id="installing-on-linux">Installing on Linux&lt;/h3>
&lt;p>When you implement multi-node installation of KubeSphere on Linux, you need to create a configuration file, which lists all KubeSphere components.&lt;/p></description></item><item><title>Service Topology</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/service-topology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/service-topology/</guid><description>&lt;p>You can enable Service Topology to integrate &lt;a href="https://www.weave.works/oss/scope/" target="_blank" rel="noopener noreferrer">Weave Scope&lt;/a>, a visualization and monitoring tool for Docker and Kubernetes. Weave Scope uses established APIs to collect information to build a topology of your apps and containers. The Service topology displays in your project, providing you with visual representations of connections based on traffic.&lt;/p>
&lt;h2 id="enable-service-topology-before-installation">Enable Service Topology Before Installation&lt;/h2>
&lt;h3 id="installing-on-linux">Installing on Linux&lt;/h3>
&lt;p>When you implement multi-node installation of KubeSphere on Linux, you need to create a configuration file, which lists all KubeSphere components.&lt;/p></description></item><item><title>Pod IP Pools</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/pod-ip-pools/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/pod-ip-pools/</guid><description>&lt;p>A Pod IP pool is used to manage the Pod network address space, and the address space between each Pod IP pool cannot overlap. When you create a workload, you can select a specific Pod IP pool, so that created Pods will be assigned IP addresses from this Pod IP pool.&lt;/p>
&lt;h2 id="enable-pod-ip-pools-before-installation">Enable Pod IP Pools Before Installation&lt;/h2>
&lt;h3 id="installing-on-linux">Installing on Linux&lt;/h3>
&lt;p>When you implement multi-node installation of KubeSphere on Linux, you need to create a configuration file, which lists all KubeSphere components.&lt;/p></description></item><item><title>KubeEdge</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/kubeedge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/kubeedge/</guid><description>&lt;p>&lt;a href="https://kubeedge.io/en/" target="_blank" rel="noopener noreferrer">KubeEdge&lt;/a> is an open-source system for extending native containerized application orchestration capabilities to hosts at edge. It supports multiple edge protocols and looks to provide unified management of cloud and edge applications and resources.&lt;/p>
&lt;p>KubeEdge has components running in two separate places - cloud and edge nodes. The components running on the cloud, collectively known as CloudCore, include Controllers and Cloud Hub. Cloud Hub serves as the gateway for the requests sent by edge nodes while Controllers function as orchestrators. The components running on edge nodes, collectively known as EdgeCore, include EdgeHub, EdgeMesh, MetadataManager, and DeviceTwin. For more information, see &lt;a href="https://kubeedge.io/en/" target="_blank" rel="noopener noreferrer">the KubeEdge website&lt;/a>.&lt;/p></description></item><item><title>Uninstall Pluggable Components</title><link>https://openksc.github.io/docs/v3.4/pluggable-components/uninstall-pluggable-components/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://openksc.github.io/docs/v3.4/pluggable-components/uninstall-pluggable-components/</guid><description>&lt;p>After you &lt;a href="../../pluggable-components/">enable the pluggable components of KubeSphere&lt;/a>, you can also uninstall them by performing the following steps. Please back up any necessary data before you uninstall these components.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>You have to change the value of the field &lt;code>enabled&lt;/code> from &lt;code>true&lt;/code> to &lt;code>false&lt;/code> in &lt;code>ks-installer&lt;/code> of the CRD &lt;code>ClusterConfiguration&lt;/code> before you uninstall any pluggable components except Service Topology and Pod IP Pools.&lt;/p>
&lt;p>Use either of the following methods to change the value of the field &lt;code>enabled&lt;/code>:&lt;/p></description></item></channel></rss>